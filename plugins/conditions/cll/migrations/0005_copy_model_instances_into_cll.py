# Generated by Django 2.0.13 on 2022-02-16 14:36
from django.db import migrations
"""
A manual migration that moves all the models over and updates their
related fields to use the appropriate related models.
"""


def copy_fields(old_instance, new_instance):
    old_fields = old_instance._meta.get_fields()
    for field in old_fields:
        if field.name == 'id':
            continue
        # skip lookup lists that we are migrating to new lookup lists
        if field.related_model and field.related_model.__name__ in (
            'RegimenList', 'StopReason'
        ):
            continue
        value = getattr(old_instance, field.name)
        setattr(new_instance, field.name, value)
    return new_instance


def copy_across_lookup_list(apps, old_model_name, new_model_name):
    """
    Create new models using the Name field of the previous lookup list
    (no other fields are populated)
    """
    old_instances = apps.get_model('entrytool', old_model_name).objects.all()
    new_model = apps.get_model('cll', new_model_name)
    new_instances = []
    for old_instance in old_instances:
        new_instances.append(new_model(name=old_instance.name))
    new_model.objects.bulk_create(new_instances)


def copy_across_models(apps, old_model_name, new_model_name):
    old_instances = apps.get_model('entrytool', old_model_name).objects.all()
    new_model = apps.get_model('cll', new_model_name)
    new_instances = []
    for old_instance in old_instances:
        new_instances.append(copy_fields(old_instance, new_model()))
    new_model.objects.bulk_create(new_instances)


def copy_and_make_into_an_episode_subrecord(apps, old_model_name, new_model_name):
    old_instances = apps.get_model('entrytool', old_model_name).objects.all()
    new_model = apps.get_model('cll', new_model_name)
    new_instances = []
    for old_instance in old_instances:
        new_instance = new_model()
        new_instance = copy_fields(old_instance, new_instance)
        new_instance.episode = old_instance.patient.episode_set.filter(
            category_name='CLL'
        ).first()
        new_instances.append(new_instance)
    new_model.objects.bulk_create(new_instances)


def copy_cll_regimen(apps):
    old_instances = apps.get_model('entrytool', "Regimen").objects.all()
    new_model = apps.get_model('cll', "CLLRegimen")
    CLLStopReason = apps.get_model('cll', "CLLStopReason")
    CLLRegimenList = apps.get_model('cll', "CLLRegimenList")
    new_instances = []
    for old_instance in old_instances:
        new_instance = new_model()
        new_instance = copy_fields(old_instance, new_instance)
        if old_instance.stop_reason_fk:
            new_instance.stop_reason_fk = CLLStopReason.objects.get(
                name=old_instance.stop_reason_fk.name
            )
        if old_instance.regimen_fk:
            new_instance.regimen_fk = CLLRegimenList.objects.get(
                name=old_instance.regimen_fk.name
            )
        new_instances.append(new_instance)
    new_model.objects.bulk_create(new_instances)


def forwards(apps, schema_editor):
    copy_across_lookup_list(apps, "RegimenList", "CLLRegimenList")
    copy_across_lookup_list(apps, "StopReason", "CLLStopReason")
    copy_and_make_into_an_episode_subrecord(
        apps, "AdditionalCharacteristics", "AdditionalCharacteristics"
    )
    copy_across_models(apps, "Response", "BestResponse")
    copy_and_make_into_an_episode_subrecord(
        apps, "PatientDetails", "CLLDiagnosisDetails"
    )
    copy_and_make_into_an_episode_subrecord(
        apps, "Cytogenetics", "Cytogenetics"
    )
    copy_and_make_into_an_episode_subrecord(
        apps, "QualityOfLife5Q", "QualityOfLife5Q"
    )
    copy_cll_regimen(apps)


class Migration(migrations.Migration):
    dependencies = [
        ('cll', '0004_additionalcharacteristics_bestresponse_clldiagnosisdetails_cllregimen_cytogenetics_qualityoflife5q'),
    ]

    operations = [
        migrations.RunPython(
            forwards
        )
    ]
