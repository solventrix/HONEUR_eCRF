# Generated by Django 2.0.13 on 2022-02-16 14:36
from django.db import migrations
import json
from django.apps.registry import Apps, apps as global_apps
from django.contrib.contenttypes.management import create_contenttypes
from django.utils.encoding import force_text

"""
A manual migration that moves all the models over and updates their
related fields to use the appropriate related models.
"""


def copy_fields(old_instance, new_instance):
    old_fields = old_instance._meta.get_fields()
    for field in old_fields:
        if field.name == "id":
            continue
        # skip lookup lists that we are migrating to new lookup lists
        if field.related_model and field.related_model.__name__ in (
            "RegimenList",
            "StopReason",
        ):
            continue
        value = getattr(old_instance, field.name)
        setattr(new_instance, field.name, value)
    return new_instance


def copy_across_lookup_list(apps, old_model_name, new_model_name):
    """
    Create new models using the Name field of the previous lookup list
    (no other fields are populated)

    We make sure not to create models that have already been created just
    in case load lookup lists has been called on the branch before migrations
    have run.
    """
    old_instances = apps.get_model("entrytool", old_model_name).objects.all()
    new_model = apps.get_model("cll", new_model_name)
    new_instances = []
    existing_new_instances = set(new_model.objects.values_list("name", flat=True))
    for old_instance in old_instances:
        if old_instance.name not in existing_new_instances:
            new_instances.append(new_model(name=old_instance.name))
    if new_instances:
        new_model.objects.bulk_create(new_instances)


def copy_across_models(
    apps, old_model_name, new_model_name, convert_to_episode_subrecord=False
):
    old_instances = apps.get_model("entrytool", old_model_name).objects.all()
    new_model = apps.get_model("cll", new_model_name)
    old_instance_to_new_instances = {}
    for old_instance in old_instances:
        new_instance = copy_fields(old_instance, new_model())
        if convert_to_episode_subrecord:
            new_instance.episode = old_instance.patient.episode_set.get(
                category_name="CLL"
            )
        old_instance_to_new_instances[old_instance] = new_instance
    new_model.objects.bulk_create(old_instance_to_new_instances.values())
    for old_instance, new_instance in old_instance_to_new_instances.items():
        copy_reversion(
            apps,
            old_model_name,
            new_model_name,
            old_instance,
            new_instance,
            convert_to_episode_subrecord=convert_to_episode_subrecord,
        )


def copy_reversion(
    apps,
    old_model_name,
    new_model_name,
    old_instance,
    new_instance,
    convert_to_episode_subrecord=False,
):
    Version = apps.get_model("reversion", "Version")
    ContentType = apps.get_model("contenttypes", "ContentType")
    oldCT = ContentType.objects.get(app_label="entrytool", model=old_model_name.lower())
    newCT = ContentType.objects.get(app_label="cll", model=new_model_name.lower())
    versions = Version.objects.filter(
        content_type_id=oldCT.id, object_id=old_instance.id
    )
    for version in versions:
        version.content_type_id = newCT.id
        version.object_id = new_instance.id
        version.object_repr = force_text(new_instance)
        serialized_data = json.loads(version.serialized_data)[0]
        serialized_data["model"] = f"cll.{new_model_name}".lower()
        if convert_to_episode_subrecord:
            serialized_data["fields"].pop("patient")
            serialized_data["fields"]["episode"] = new_instance.episode_id
        version.serialized_data = json.dumps([serialized_data])
        version.save()


def copy_cll_regimen(apps):
    old_instances = apps.get_model("entrytool", "Regimen").objects.all()
    new_model = apps.get_model("cll", "CLLRegimen")
    CLLStopReason = apps.get_model("cll", "CLLStopReason")
    CLLRegimenList = apps.get_model("cll", "CLLRegimenList")
    old_instance_to_new_instances = {}
    for old_instance in old_instances:
        new_instance = new_model()
        new_instance = copy_fields(old_instance, new_instance)
        if old_instance.stop_reason_fk:
            new_instance.stop_reason_fk = CLLStopReason.objects.get(
                name=old_instance.stop_reason_fk.name
            )
        if old_instance.regimen_fk:
            new_instance.regimen_fk = CLLRegimenList.objects.get(
                name=old_instance.regimen_fk.name
            )
        old_instance_to_new_instances[old_instance] = new_instance
    new_model.objects.bulk_create(old_instance_to_new_instances.values())
    for old_instance, new_instance in old_instance_to_new_instances.items():
        copy_cll_reversion(apps, old_instance, new_instance)


def copy_cll_reversion(apps, old_instance, new_instance):
    Version = apps.get_model("reversion", "Version")
    ContentType = apps.get_model("contenttypes", "ContentType")
    oldRegimenCT = ContentType.objects.get(app_label="entrytool", model="regimen")
    newRegimenCT = ContentType.objects.get(app_label="cll", model="cllregimen")
    OldRegimenList = apps.get_model("entrytool", "RegimenList")
    NewRegimenList = apps.get_model("cll", "CLLRegimenList")
    OldStopReason = apps.get_model("entrytool", "StopReason")
    NewStopReason = apps.get_model("cll", "CLLStopReason")
    versions = Version.objects.filter(
        content_type_id=oldRegimenCT.id, object_id=old_instance.id
    )

    for version in versions:
        version.content_type_id = newRegimenCT.id
        version.object_id = new_instance.id
        version.object_repr = force_text(new_instance)
        serialized_data = json.loads(version.serialized_data)[0]
        serialized_data["model"] = "cll.cllregimen"
        old_regimen_fk = serialized_data["fields"]["regimen_fk"]
        if old_regimen_fk:
            old_regimen_ll = OldRegimenList.objects.filter(id=old_regimen_fk).first()
            if old_regimen_ll:
                new_regimen_ll = NewRegimenList.objects.get(name=old_regimen_ll.name)
                serialized_data["fields"]["regimen_fk"] = new_regimen_ll.id
        old_stopreason_fk = serialized_data["fields"]["stop_reason_fk"]
        if old_stopreason_fk:
            old_stop_reason_ll = OldStopReason.objects.filter(
                id=old_stopreason_fk
            ).first()
            if old_stop_reason_ll:
                new_stop_reason_ll = NewStopReason.objects.get(
                    name=old_stop_reason_ll.name
                )
                serialized_data["fields"]["stop_reason_fk"] = new_stop_reason_ll.id
        version.serialized_data = json.dumps([serialized_data])
        version.save()


from django.db import transaction


@transaction.atomic
def forwards(apps, schema_editor):
    # Create the content types for the new cll models so we can
    # access them when we move old models version data to the
    # new models
    global_app_config = global_apps.get_app_config("cll")
    create_contenttypes(global_app_config)
    copy_across_lookup_list(apps, "RegimenList", "CLLRegimenList")
    copy_across_lookup_list(apps, "StopReason", "CLLStopReason")
    copy_across_models(
        apps,
        "AdditionalCharacteristics",
        "AdditionalCharacteristics",
        convert_to_episode_subrecord=True,
    )
    copy_across_models(apps, "Response", "BestResponse")
    copy_across_models(
        apps, "PatientDetails", "CLLDiagnosisDetails", convert_to_episode_subrecord=True
    )
    copy_across_models(
        apps, "Cytogenetics", "Cytogenetics", convert_to_episode_subrecord=True
    )
    copy_across_models(
        apps, "QualityOfLife5Q", "QualityOfLife5Q", convert_to_episode_subrecord=True
    )
    copy_cll_regimen(apps)


class Migration(migrations.Migration):
    dependencies = [
        (
            "cll",
            "0004_additionalcharacteristics_bestresponse_clldiagnosisdetails_cllregimen_cytogenetics_qualityoflife5q",
        ),
    ]

    run_before = [
        (
            "entrytool",
            "0044_auto_20220217_1040",
        ),
    ]

    operations = [migrations.RunPython(forwards)]
