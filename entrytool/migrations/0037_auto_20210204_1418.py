# Generated by Django 2.0.13 on 2021-02-04 14:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import opal.models


class Migration(migrations.Migration):

    dependencies = [
        ('opal', '0039_auto_20201007_1245'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('entrytool', '0036_auto_20210203_1416'),
    ]

    operations = [
        migrations.CreateModel(
            name='BoneScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, null=True, verbose_name='Created')),
                ('updated', models.DateTimeField(blank=True, null=True, verbose_name='Updated')),
                ('consistency_token', models.CharField(max_length=8, verbose_name='Consistency Token')),
                ('scan_date', models.DateField(verbose_name='Bone Scan Date')),
                ('dz_skull', models.NullBooleanField(verbose_name='Destruction zones in the skull')),
                ('dz_shoulder', models.NullBooleanField(verbose_name='Destruction zones in the shoulder girdle')),
                ('dz_ribs', models.NullBooleanField(verbose_name='Destruction zones in ribs, chest')),
                ('dz_spine', models.NullBooleanField(verbose_name='Destruction zones in the spine')),
                ('dz_pelvis', models.NullBooleanField(verbose_name='Destruction zones in the pelvic bones')),
                ('dz_tubular_bones', models.NullBooleanField(verbose_name='Destruction zones in long tubular bones')),
                ('mri_done', models.NullBooleanField(verbose_name='MRI done')),
                ('mri_result', models.CharField(blank=True, choices=[('Corresponds to Rx', 'Corresponds to Rx'), ('Improved diagnosis', 'Improved diagnosis')], max_length=50, null=True, verbose_name='Outcome of MRI')),
                ('pet_done', models.NullBooleanField(verbose_name='PET scan done')),
                ('pet_result', models.CharField(blank=True, choices=[('Corresponds to Rx', 'Corresponds to Rx'), ('Improved diagnosis', 'Improved diagnosis')], max_length=50, null=True, verbose_name='Outcome of PET')),
                ('pet_ct_done', models.NullBooleanField(verbose_name='PET-CT scan done')),
                ('pet_ct_result', models.CharField(blank=True, choices=[('Corresponds to Rx', 'Corresponds to Rx'), ('Improved diagnosis', 'Improved diagnosis')], max_length=50, null=True, verbose_name='Outcome of PET-CT')),
                ('plasmacytoma_presence', models.NullBooleanField(verbose_name='Plasmacytoma present')),
                ('scintigraphy_done', models.NullBooleanField(verbose_name='Scintigraphy done')),
                ('compression_fractures', models.NullBooleanField(verbose_name='Compression fractures present')),
                ('spinal_compression', models.NullBooleanField(verbose_name='Spinal cord compression')),
                ('surgical_aid', models.CharField(blank=True, choices=[('Not done', 'Not done'), ('Vertebroplasty', 'Vertebroplasty'), ('Plate installation', 'Plate installation'), ('Plastering', 'Plastering')], max_length=50, null=True, verbose_name='Surgical aid performed')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_entrytool_bonescan_subrecords', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opal.Patient', verbose_name='Patient')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_entrytool_bonescan_subrecords', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Bone scan',
                'verbose_name_plural': 'Bone scans',
            },
            bases=(opal.models.UpdatesFromDictMixin, opal.models.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProteinMeasurements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, null=True, verbose_name='Created')),
                ('updated', models.DateTimeField(blank=True, null=True, verbose_name='Updated')),
                ('consistency_token', models.CharField(max_length=8, verbose_name='Consistency Token')),
                ('protein_measurement_date', models.DateField(verbose_name='Protein measurement date')),
                ('igg', models.FloatField(blank=True, null=True, verbose_name='IgG')),
                ('iga', models.FloatField(blank=True, null=True, verbose_name='IgA')),
                ('igm', models.FloatField(blank=True, null=True, verbose_name='IgM')),
                ('bence_jones_presence', models.NullBooleanField(verbose_name='Bence-Jones Protein present in urine')),
                ('bence_jones_level', models.FloatField(blank=True, null=True, verbose_name='Bence-Jones Protein in Urine over time')),
                ('light_chain_secretion', models.NullBooleanField(verbose_name='Light chain secretion')),
                ('serum_kappa', models.FloatField(blank=True, null=True, verbose_name='Serum kappa chain')),
                ('serum_free_kappa', models.FloatField(blank=True, null=True, verbose_name='Serum free kappa chains')),
                ('serum_lambda', models.FloatField(blank=True, null=True, verbose_name='Serum lambda')),
                ('serum_free_lambda', models.FloatField(blank=True, null=True, verbose_name='Serum free lambda chains')),
                ('urine_kappa', models.FloatField(blank=True, null=True, verbose_name='Urine kappa chains')),
                ('urine_free_kappa', models.FloatField(blank=True, null=True, verbose_name='Urine free kappa chains')),
                ('urine_lambda', models.FloatField(blank=True, null=True, verbose_name='Urine lambda chains')),
                ('urine_free_lambda', models.FloatField(blank=True, null=True, verbose_name='Urine free lambda chains')),
                ('flc_ratio', models.FloatField(blank=True, null=True, verbose_name='FLC ratio')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_entrytool_proteinmeasurements_subrecords', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opal.Patient', verbose_name='Patient')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_entrytool_proteinmeasurements_subrecords', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Protein measurement',
                'verbose_name_plural': 'Protein measurements',
            },
            bases=(opal.models.UpdatesFromDictMixin, opal.models.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TrephineBiopsy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, null=True, verbose_name='Created')),
                ('updated', models.DateTimeField(blank=True, null=True, verbose_name='Updated')),
                ('consistency_token', models.CharField(max_length=8, verbose_name='Consistency Token')),
                ('trephine_biopsy_date', models.DateField(verbose_name='Trephine Biopsy Date')),
                ('cellularity', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cellularity')),
                ('hematopoietic_tissue', models.FloatField(blank=True, null=True, verbose_name='Hematopoietic tissue (%)')),
                ('adipose_tissue', models.FloatField(blank=True, null=True, verbose_name='Adipose tissue (%)')),
                ('plasma_infiltration', models.FloatField(blank=True, null=True, verbose_name='Plasma infiltration (%)')),
                ('phenotype', models.CharField(blank=True, max_length=100, null=True, verbose_name='Phenotype')),
                ('histo_features', models.CharField(blank=True, max_length=100, null=True, verbose_name='Histological and immunohistochemical features')),
                ('m_component', models.CharField(blank=True, max_length=100, null=True, verbose_name='M-Component')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_entrytool_trephinebiopsy_subrecords', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opal.Patient', verbose_name='Patient')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_entrytool_trephinebiopsy_subrecords', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Trephine biopsy',
                'verbose_name_plural': 'Trephine biopsies',
            },
            bases=(opal.models.UpdatesFromDictMixin, opal.models.ToDictMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='followup',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='followup',
            name='hospital_fk',
        ),
        migrations.RemoveField(
            model_name='followup',
            name='patient',
        ),
        migrations.RemoveField(
            model_name='followup',
            name='updated_by',
        ),
        migrations.AddField(
            model_name='bloodcountfollowup',
            name='albumin',
            field=models.FloatField(blank=True, null=True, verbose_name='albumin'),
        ),
        migrations.AddField(
            model_name='bloodcountfollowup',
            name='b2m',
            field=models.FloatField(blank=True, null=True, verbose_name='Beta-2-microglobulin'),
        ),
        migrations.AddField(
            model_name='bloodcountfollowup',
            name='ldh',
            field=models.FloatField(blank=True, null=True, verbose_name='LDH'),
        ),
        migrations.DeleteModel(
            name='FollowUp',
        ),
    ]
